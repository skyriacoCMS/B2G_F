#include "FWCore/Framework/interface/EDProducer.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/EDMException.h"
// dR and dPhi                                                                                                                                                              
#include "DataFormats/Math/interface/deltaR.h"
#include "DataFormats/Math/interface/deltaPhi.h"


// Photon dependencies
#include "DataFormats/EgammaCandidates/interface/Photon.h"
#include "DataFormats/PatCandidates/interface/Photon.h"
#include "DataFormats/Common/interface/ValueMap.h"
#include "RecoEcal/EgammaCoreTools/interface/EcalClusterLazyTools.h"

#include "DataFormats/ParticleFlowCandidate/interface/PFCandidate.h"
#include "DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h"
#include "DataFormats/PatCandidates/interface/PackedCandidate.h"





#include "DataFormats/PatCandidates/interface/Electron.h"
#include "RecoEgamma/EgammaTools/interface/ConversionTools.h"
#include "RecoEcal/EgammaCoreTools/interface/EcalClusterTools.h"
//#include "RecoEgamma/PhotonIdentification/src/PFPhotonIsolationCalculator.h"
///   


// Vertex
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"

// trigger
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "DataFormats/HLTReco/interface/TriggerEvent.h"
#include "DataFormats/HLTReco/interface/TriggerObject.h"
#include "DataFormats/HLTReco/interface/TriggerTypeDefs.h" // gives access to the (release cycle dependent) trigger object codes

#include "DataFormats/Common/interface/ValueMap.h"
#include "DataFormats/Common/interface/View.h"
#include "DataFormats/Common/interface/Ptr.h"

#include<vector>

using namespace reco;
using namespace edm;
using namespace std;


class  PhotonUserData : public edm::EDProducer {
public:
  PhotonUserData( const edm::ParameterSet & );   

private:
  void produce( edm::Event &, const edm::EventSetup & );
  bool isMatchedWithTrigger();
  bool passIDWP();
  float IsoCalc();

  InputTag phoLabel_;
  InputTag pvLabel_, convLabel_;
  InputTag rhoLabel_;
  InputTag ebRCH_,eeRCH_;
  InputTag pckPFCdsLabel_;


  InputTag triggerResultsLabel_, triggerSummaryLabel_;
  InputTag hltElectronFilterLabel_;
  TString hltPath_;
  HLTConfigProvider hltConfig;
  int triggerBit;
  int debug_; 

};



//Necessary for the Photon Footprint removal
//template <class T, class U>
//bool isInFootprint(const T& thefootprint, const U& theCandidate) {
//  for ( auto itr = thefootprint.begin(); itr != thefootprint.end(); ++itr ) {
//    if( itr->key() == theCandidate.key() ) return true;
//  }
//  return false;
//}





namespace EffectiveAreas {
  const int nEtaBins = 7;
  const float etaBinLimits[nEtaBins+1] = {
    0.0, 1.0, 1.479, 2.0, 2.2, 2.3, 2.4, 2.5};

  const float areaPhotons[nEtaBins] = {
    0.0894, 0.0750, 0.0423, 0.0561, 0.0882, 0.1144, 0.1684
  };
  const float areaNeutralHadrons[nEtaBins] = {
    0.049, 0.0108, 0.0019, 0.0037, 0.0062, 0.0130, 0.1699
  };
  const float areaChargedHadrons[nEtaBins] = {
    0.0089, 0.0062, 0.0086, 0.0041, 0.0113, 0.0085, 0.0039
  };
}






PhotonUserData::PhotonUserData(const edm::ParameterSet& iConfig):
   phoLabel_(iConfig.getParameter<edm::InputTag>("phoLabel")),
   pvLabel_(iConfig.getParameter<edm::InputTag>("pv")),   // "offlinePrimaryVertex"
   convLabel_(iConfig.getParameter<edm::InputTag>("conversion")),  // "offlinePrimaryVertex"
   rhoLabel_(iConfig.getParameter<edm::InputTag>("rho")), //rhofixedgridRhoFastjet All"
   ebRCH_(iConfig.getParameter<edm::InputTag>("ebReducedRecHitCollection")), //Lazy tool additions
   eeRCH_(iConfig.getParameter<edm::InputTag>("eeReducedRecHitCollection")),  // Lazy tool additions
   pckPFCdsLabel_(iConfig.getParameter<edm::InputTag>("packedPFCands"))
 
{
  debug_ = iConfig.getUntrackedParameter<int>("debugLevel",int(0));
  produces<std::vector<pat::Photon> >();
}

void PhotonUserData::produce( edm::Event& iEvent, const edm::EventSetup& iSetup) {

  
  //PV
  edm::Handle<std::vector<reco::Vertex> > vertices;
  iEvent.getByLabel(pvLabel_, vertices);


  //Photons
  edm::Handle<std::vector<pat::Photon> > phoHandle;
  iEvent.getByLabel(phoLabel_, phoHandle);
  auto_ptr<vector<pat::Photon> > phoColl( new vector<pat::Photon> (*phoHandle) );
  
  
  //Packed PF Cands
  edm::Handle<std::vector<pat::PackedCandidate>> pfCndHandle;
  iEvent.getByLabel(pckPFCdsLabel_,pfCndHandle); 
  auto_ptr<vector<pat::PackedCandidate> > CandColl( new vector<pat::PackedCandidate> (*pfCndHandle) );
  


  // Ecal Rec Hits
  edm::EDGetTokenT<EcalRecHitCollection> ebReducedRecHitCollection_;
  edm::EDGetTokenT<EcalRecHitCollection> eeReducedRecHitCollection_;
  ebReducedRecHitCollection_ = consumes<EcalRecHitCollection>( ebRCH_);
  eeReducedRecHitCollection_ = consumes<EcalRecHitCollection>( eeRCH_);
  

  //rho
  float rho_;
  edm::Handle< double > rhoH;
  iEvent.getByLabel(rhoLabel_,rhoH);
  rho_ = *rhoH;


  Handle<reco::ConversionCollection> conversions;
  iEvent.getByLabel(convLabel_, conversions);






  if(debug_>=1) cout<<"vtx size " << vertices->size()<<endl; 

  reco::TrackBase::Point vtxPoint(0,0, 0);
  if(  vertices->size() >= 1 ) {
    vtxPoint = vertices->at(0).position();
  }

  if(debug_>=1) cout<<"vtxPoint " <<vtxPoint.X()<<" "<< vtxPoint.Y()<<" "<< vtxPoint.Z()<<endl; 
  
  noZS::EcalClusterLazyTools *lazyToolnoZS;
  lazyToolnoZS = new noZS::EcalClusterLazyTools(iEvent, iSetup, ebReducedRecHitCollection_, eeReducedRecHitCollection_);
   

  
 


  for(size_t i = 0; i< phoColl->size();i++){
    pat::Photon & pho = (*phoColl)[i];

    
    float pho_eta = pho.superCluster()->eta();
    float pho_phi = pho.superCluster()->phi();
    float pho_pt  = pho.pt();

    if(pho_pt < 15 || fabs(pho_eta) < 2.5) continue;

    
    reco::Vertex pv = vertices->at(0);


    //setting the photon directions with respect to the primary vertex
    math::XYZVector photon_directionWrtVtx(iPho->superCluster()->x() - pv.x(),
					   iPho->superCluster()->y() - pv.y(),
                                           iPho->superCluster()->z() - pv.z());


    // shower shape variables
    float r_9  = pho.r9();
    float hoe = pho.hadTowOverEm();
  
    //extracting sigma I eta I eat 5X5 using the Lazy tool
    const auto& theseed = *(pho.superCluster()->seed());
    float see = -999;
    std::vector<float> vCov = lazyToolnoZS->localCovariances( theseed );
    see = (isnan(vCov[0]) ? 0. : sqrt(vCov[0]));
    float sigmaIetaIeta = see;

    //isolation variables 
    float isoN = pho.neutralHadronIso(); 
    float isoP = pho.photonIso(); 
    float isoC = pho.chargedHadronIso(); 

    //Calculating the Isolation from the pf candidates
    //CandColl

    for(size_t k = 0; k< CandColl->size();i++){
      pat::PackedCandidate & pfC = (*CandColl)[i];
      float DR = deltaR(phodirWrtVTX.eta(),phodirWrtVTX.phi(),pfC.eta(),pfC().phi());
      cout<<"Looping over the pf cands!!!"<<endl;
      
      cout<<"DR"<<DR<<endl;
      


    }
    



    // setting effective areas region
    int ieBin = 0; 
    while(ieBin < (EffectiveAreas::nEtaBins -1) && pho_eta > EffectiveAreas::etaBinLimits[ieBin+1]) ieBin++;

    float isoC_withEA = std::max(float(0.0),isoC - rho_ * EffectiveAreas::areaChargedHadrons[ieBin]);
    float isoN_withEA = std::max(float(0.0),isoN - rho_ * EffectiveAreas::areaNeutralHadrons[ieBin]);
    float isoP_withEA = std::max(float(0.0),isoP - rho_ * EffectiveAreas::areaPhotons[ieBin]);


    

    // other variables
    int hasPixelSeed    = pho.hasPixelSeed(); 


    // ID bools
    int isLoose  = 0; 
    int isMedium = 0; 
    int isTight  = 0; 




    pho.addUserInt("phoSc_eta",pho_eta);
    pho.addUserInt("phoSc_phi",pho_phi);

    pho.addUserInt("hasPixelSeed",   hasPixelSeed);
    pho.addUserFloat("sigmaIetaIeta",    sigmaIetaIeta);
    pho.addUserFloat("hoe",     hoe);
    pho.addUserFloat("r_9",     r_9);
    pho.addUserFloat("isoC",    isoC);
    pho.addUserFloat("isoP",    isoP);
    pho.addUserFloat("isoN",    isoN);


    pho.addUserFloat("isoC_withEA",isoC_withEA);
    pho.addUserFloat("isoP_withEA",isoP_withEA);
    pho.addUserFloat("isoN_withEA",isoN_withEA);
  


    pho.addUserFloat("isLoose",    isLoose);
    pho.addUserFloat("isMedium",    isMedium);
    pho.addUserFloat("isTight",    isTight);

  }
   iEvent.put( phoColl );

}

float
PhotonUserData::IsoCalc(){

  return 2.0;

}


bool
PhotonUserData::isMatchedWithTrigger(){
  return true;
}


bool PhotonUserData::passIDWP(){
 
  return true;
}



#include "FWCore/Framework/interface/MakerMacros.h"
DEFINE_FWK_MODULE(PhotonUserData);
